[package]
authors = ["Nicky Meuleman <nicky.dev@outlook.com>"]
edition = "2021"
name = "aoc2021"
version = "0.4.1"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "0.2.80"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = {version = "0.1.6", optional = true}

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = {version = "0.4.5", optional = true}

web-sys = {version = "0.3.55", features = ["console"]}

hashbrown = "0.11.2"

[dev-dependencies]
wasm-bindgen-test = "0.3.13"
criterion = "0.3"

[profile.release]
# Tell `LLVM` to optimize for size.
opt-level = "s"
# use link time optimization, slower builds
lto = true

[package.metadata.wasm-pack.profile.release]
# run wasm-opt with a flag.
# for example, the optimization flag possibilities:
# -Os    size
# -Oz    aggressive size
# -O    speed
# -O4   aggressive speed
wasm-opt = ['-O']

[[bench]]
name = "my_benchmark"
path = "bench/my_benchmark.rs"
harness = false